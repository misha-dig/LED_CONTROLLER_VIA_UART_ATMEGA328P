
UART_MANIPLUTATION_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000326  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cff  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000897  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a0  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000203  00000000  00000000  000025ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3c       	cpi	r26, 0xC0	; 192
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <led_init>:
* Return value: None
* Argument: None
*/
void led_init()
{
	DDRD |= (1 << DDD2); // Set OUTPUT mode in PD2 pin
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); // Set OUTPUT mode in PD3 pin
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD4); // Set OUTPUT mode in PD4 pin
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	08 95       	ret

000000aa <set_led>:
* Argument: color_led (uint8_t) - choose pin of led. stat (uint8_t) - set state led. 
* Return value: None
*/
void set_led(uint8_t color_led, uint8_t stat)
{
	if (stat) PORTD |= (1 << color_led); // Set HIGH level selected color led 
  aa:	66 23       	and	r22, r22
  ac:	69 f0       	breq	.+26     	; 0xc8 <set_led+0x1e>
  ae:	4b b1       	in	r20, 0x0b	; 11
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	b9 01       	movw	r22, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <set_led+0x12>
  b8:	66 0f       	add	r22, r22
  ba:	77 1f       	adc	r23, r23
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <set_led+0xe>
  c0:	cb 01       	movw	r24, r22
  c2:	84 2b       	or	r24, r20
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret
	else PORTD &= ~(1 << color_led); // Set LOW level selected color led
  c8:	4b b1       	in	r20, 0x0b	; 11
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <set_led+0x2c>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <set_led+0x28>
  da:	cb 01       	movw	r24, r22
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	08 95       	ret

000000e4 <all_leds>:
* Argument: stat (uint8_t) - set state led.
* Return value: None
*/
void all_leds(uint8_t stat)
{
	if (stat)
  e4:	88 23       	and	r24, r24
  e6:	51 f0       	breq	.+20     	; 0xfc <all_leds+0x18>
	{
		PORTD |= (1 << RED_LED);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << GREEN_LED);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << BLUE_LED);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << RED_LED);
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << GREEN_LED); 
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << BLUE_LED); 
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <main>:
/* Set maximum size characters which we can send command in Serial port UART to perform action (e.g. Switching leds) */
#define BUFFER_SIZE 16

/* Main function */
int main(void)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	60 97       	sbiw	r28, 0x10	; 16
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	/* Initialization peripherals */
	led_init(); // led initialization 
 124:	0e 94 4b 00 	call	0x96	; 0x96 <led_init>
	UART_init(); // UART initialization 
 128:	0e 94 4b 01 	call	0x296	; 0x296 <UART_init>
	UART_Transmit_multiple_characters("Welcome! \r\n"); // Display word "Welcome" in console for checking UART is working. 
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 5e 01 	call	0x2bc	; 0x2bc <UART_Transmit_multiple_characters>
	
	/* Test LEDS */
	all_leds(HIGH);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 72 00 	call	0xe4	; 0xe4 <all_leds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x30>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x3a>
 14a:	00 00       	nop
	_delay_ms(50);
	all_leds(LOW);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <all_leds>
	
	/* Infinite loop */
    while (1) 
    {
		/* Declaration buffer */
		uint8_t buffer[BUFFER_SIZE] = {'\0'}; // Buffer array for entering command
 152:	fe 01       	movw	r30, r28
 154:	31 96       	adiw	r30, 0x01	; 1
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	df 01       	movw	r26, r30
 15a:	1d 92       	st	X+, r1
 15c:	8a 95       	dec	r24
 15e:	e9 f7       	brne	.-6      	; 0x15a <main+0x4a>
		
		/* Loop that find ASCII character to perform commands when hit a ENTER button */
		for (int count_buf = 0; count_buf < BUFFER_SIZE - 1; count_buf++)
 160:	00 e0       	ldi	r16, 0x00	; 0
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	18 c0       	rjmp	.+48     	; 0x196 <main+0x86>
		{
			do
			{
				/* Receive single characters after send character in UART console */
				buffer[count_buf] = UART_Receive_single_character();
 166:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <UART_Receive_single_character>
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ec 0f       	add	r30, r28
 170:	fd 1f       	adc	r31, r29
 172:	e0 0f       	add	r30, r16
 174:	f1 1f       	adc	r31, r17
 176:	80 83       	st	Z, r24
			}
			/* Checking that no special ASCII characters. If special character is found you need to reenter letter, digits, space, carriage return */
			while ((buffer[count_buf] < 32 && buffer[count_buf] > 13) || buffer[count_buf] < 13);
 178:	92 ef       	ldi	r25, 0xF2	; 242
 17a:	98 0f       	add	r25, r24
 17c:	92 31       	cpi	r25, 0x12	; 18
 17e:	98 f3       	brcs	.-26     	; 0x166 <main+0x56>
 180:	8d 30       	cpi	r24, 0x0D	; 13
 182:	88 f3       	brcs	.-30     	; 0x166 <main+0x56>
			
			/* Exit receiving characters after hitting enter button in keyboard or putting carriage return in your serial port terminal */
			/* Check character has CR. If found CR character finish send UART and exit from this for loop for starting perform tasks */
			if (buffer[count_buf] == 13)
 184:	8d 30       	cpi	r24, 0x0D	; 13
 186:	29 f4       	brne	.+10     	; 0x192 <main+0x82>
			{
				UART_Transmit_multiple_characters(buffer); // Print the buffer in UART terminal for checking purpose
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <UART_Transmit_multiple_characters>
				break; //Exit from this loop operation
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0x8c>
    {
		/* Declaration buffer */
		uint8_t buffer[BUFFER_SIZE] = {'\0'}; // Buffer array for entering command
		
		/* Loop that find ASCII character to perform commands when hit a ENTER button */
		for (int count_buf = 0; count_buf < BUFFER_SIZE - 1; count_buf++)
 192:	0f 5f       	subi	r16, 0xFF	; 255
 194:	1f 4f       	sbci	r17, 0xFF	; 255
 196:	0f 30       	cpi	r16, 0x0F	; 15
 198:	11 05       	cpc	r17, r1
 19a:	2c f3       	brlt	.-54     	; 0x166 <main+0x56>
			}
		}
		
		/* Execute command if you entered correct name of command in serial terminal */
		/* You must put a argument strlen(buffer) - 1 in each function strncmp to avoid doesn't working this commands */
		if (strncmp(buffer, (uint8_t*)"RED_LED_ON", strlen(buffer) - 1) == 0) set_led(RED_LED, HIGH); // Turns on red led
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	fc 01       	movw	r30, r24
 1a2:	01 90       	ld	r0, Z+
 1a4:	00 20       	and	r0, r0
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <main+0x92>
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	e8 1b       	sub	r30, r24
 1ac:	f9 0b       	sbc	r31, r25
 1ae:	8f 01       	movw	r16, r30
 1b0:	01 50       	subi	r16, 0x01	; 1
 1b2:	11 09       	sbc	r17, r1
 1b4:	a8 01       	movw	r20, r16
 1b6:	6c e0       	ldi	r22, 0x0C	; 12
 1b8:	71 e0       	ldi	r23, 0x01	; 1
 1ba:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 1be:	89 2b       	or	r24, r25
 1c0:	29 f4       	brne	.+10     	; 0x1cc <main+0xbc>
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 1ca:	c3 cf       	rjmp	.-122    	; 0x152 <main+0x42>
		else if (strncmp(buffer, (uint8_t*)"RED_LED_OFF", strlen(buffer) - 1) == 0) set_led(RED_LED, LOW); // Turn off red led 
 1cc:	a8 01       	movw	r20, r16
 1ce:	67 e1       	ldi	r22, 0x17	; 23
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 1da:	89 2b       	or	r24, r25
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <main+0xd8>
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 1e6:	b5 cf       	rjmp	.-150    	; 0x152 <main+0x42>
		
		else if (strncmp(buffer, (uint8_t*)"GREEN_LED_ON", strlen(buffer) - 1) == 0) set_led(GREEN_LED, HIGH); // Turns on green led
 1e8:	a8 01       	movw	r20, r16
 1ea:	63 e2       	ldi	r22, 0x23	; 35
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 1f6:	89 2b       	or	r24, r25
 1f8:	29 f4       	brne	.+10     	; 0x204 <main+0xf4>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 202:	a7 cf       	rjmp	.-178    	; 0x152 <main+0x42>
		else if (strncmp(buffer, (uint8_t*)"GREEN_LED_OFF", strlen(buffer) - 1) == 0) set_led(GREEN_LED, LOW); // Turn off green led
 204:	a8 01       	movw	r20, r16
 206:	60 e3       	ldi	r22, 0x30	; 48
 208:	71 e0       	ldi	r23, 0x01	; 1
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 212:	89 2b       	or	r24, r25
 214:	29 f4       	brne	.+10     	; 0x220 <main+0x110>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 21e:	99 cf       	rjmp	.-206    	; 0x152 <main+0x42>
		
		else if (strncmp(buffer, (uint8_t*)"BLUE_LED_ON", strlen(buffer) - 1) == 0) set_led(BLUE_LED, HIGH); // Turns on blue led
 220:	a8 01       	movw	r20, r16
 222:	6e e3       	ldi	r22, 0x3E	; 62
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 22e:	89 2b       	or	r24, r25
 230:	29 f4       	brne	.+10     	; 0x23c <main+0x12c>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 23a:	8b cf       	rjmp	.-234    	; 0x152 <main+0x42>
		else if (strncmp(buffer, (uint8_t*)"BLUE_LED_OFF", strlen(buffer) - 1) == 0) set_led(BLUE_LED, LOW); // Turn off blue led
 23c:	a8 01       	movw	r20, r16
 23e:	6a e4       	ldi	r22, 0x4A	; 74
 240:	71 e0       	ldi	r23, 0x01	; 1
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 24a:	89 2b       	or	r24, r25
 24c:	29 f4       	brne	.+10     	; 0x258 <main+0x148>
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	0e 94 55 00 	call	0xaa	; 0xaa <set_led>
 256:	7d cf       	rjmp	.-262    	; 0x152 <main+0x42>
		
		else if (strncmp(buffer, (uint8_t*)"ALL_LEDS_ON", strlen(buffer) - 1) == 0) all_leds(HIGH); // Turns on all LEDs
 258:	a8 01       	movw	r20, r16
 25a:	67 e5       	ldi	r22, 0x57	; 87
 25c:	71 e0       	ldi	r23, 0x01	; 1
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 266:	89 2b       	or	r24, r25
 268:	21 f4       	brne	.+8      	; 0x272 <main+0x162>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 72 00 	call	0xe4	; 0xe4 <all_leds>
 270:	70 cf       	rjmp	.-288    	; 0x152 <main+0x42>
		else if (strncmp(buffer, (uint8_t*)"ALL_LEDS_OFF", strlen(buffer) - 1) == 0) all_leds(LOW); // Turn off all LEDs
 272:	a8 01       	movw	r20, r16
 274:	63 e6       	ldi	r22, 0x63	; 99
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 83 01 	call	0x306	; 0x306 <strncmp>
 280:	89 2b       	or	r24, r25
 282:	21 f4       	brne	.+8      	; 0x28c <main+0x17c>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 72 00 	call	0xe4	; 0xe4 <all_leds>
 28a:	63 cf       	rjmp	.-314    	; 0x152 <main+0x42>
		
		/* Message that incorrect entering command when enter another command than above code line*/
		else UART_Transmit_multiple_characters("Error! Unable recognize a command in this code. Please try other commands... \r\n"); 
 28c:	80 e7       	ldi	r24, 0x70	; 112
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 5e 01 	call	0x2bc	; 0x2bc <UART_Transmit_multiple_characters>
    }
 294:	5e cf       	rjmp	.-324    	; 0x152 <main+0x42>

00000296 <UART_init>:
* Argument: None
*/
void UART_init()
{
    /* Set baud rate by calculation formula */
    UBRR0H = (unsigned char)(BAUDRATE>>8);
 296:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)BAUDRATE;
 29a:	87 e0       	ldi	r24, 0x07	; 7
 29c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	/* Allow UART to transmit and receive buffers */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    /* Set frame format: 8data, 1stop bit */
    UCSR0C = 0b00000110;
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2ac:	08 95       	ret

000002ae <UART_Transmit_single_character>:
*       UART_Transmit_single_character('A');
*/
void UART_Transmit_single_character(unsigned char data)
{
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
 2ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <UART_Transmit_single_character>
    /* Put data into buffer, sends the data */
    UDR0 = data;
 2b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ba:	08 95       	ret

000002bc <UART_Transmit_multiple_characters>:
* Example to use: 
*       unsigned char text[] = "Hello, World! \r\n";
*       UART_Transmit_multiple_characters(text); 
*/
void UART_Transmit_multiple_characters(unsigned char* data)
{
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8c 01       	movw	r16, r24
	/* Loop for transmit each characters. How many transmit characters is dependent string length. */
    for(int ch = 0; ch < strlen(data); ch++) UART_Transmit_single_character(data[ch]); // Transmit UART each character 
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <UART_Transmit_multiple_characters+0x1e>
 2cc:	f8 01       	movw	r30, r16
 2ce:	ec 0f       	add	r30, r28
 2d0:	fd 1f       	adc	r31, r29
 2d2:	80 81       	ld	r24, Z
 2d4:	0e 94 57 01 	call	0x2ae	; 0x2ae <UART_Transmit_single_character>
 2d8:	21 96       	adiw	r28, 0x01	; 1
 2da:	f8 01       	movw	r30, r16
 2dc:	01 90       	ld	r0, Z+
 2de:	00 20       	and	r0, r0
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <UART_Transmit_multiple_characters+0x20>
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	e0 1b       	sub	r30, r16
 2e6:	f1 0b       	sbc	r31, r17
 2e8:	ce 17       	cp	r28, r30
 2ea:	df 07       	cpc	r29, r31
 2ec:	78 f3       	brcs	.-34     	; 0x2cc <UART_Transmit_multiple_characters+0x10>
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <UART_Receive_single_character>:
* Argument: None
*/
unsigned char UART_Receive_single_character()
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 2f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2fc:	88 23       	and	r24, r24
 2fe:	e4 f7       	brge	.-8      	; 0x2f8 <UART_Receive_single_character>
	/* Get and return received data from buffer */
	return UDR0;
 300:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 304:	08 95       	ret

00000306 <strncmp>:
 306:	fb 01       	movw	r30, r22
 308:	dc 01       	movw	r26, r24
 30a:	41 50       	subi	r20, 0x01	; 1
 30c:	50 40       	sbci	r21, 0x00	; 0
 30e:	30 f0       	brcs	.+12     	; 0x31c <strncmp+0x16>
 310:	8d 91       	ld	r24, X+
 312:	01 90       	ld	r0, Z+
 314:	80 19       	sub	r24, r0
 316:	19 f4       	brne	.+6      	; 0x31e <strncmp+0x18>
 318:	00 20       	and	r0, r0
 31a:	b9 f7       	brne	.-18     	; 0x30a <strncmp+0x4>
 31c:	88 1b       	sub	r24, r24
 31e:	99 0b       	sbc	r25, r25
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
